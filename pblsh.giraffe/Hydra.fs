// This code was generated by `SqlHydra.Sqlite` -- v2.4.1.
namespace pblsh.Hydra

open SqlHydra
open SqlHydra.Query.Table

[<AutoOpen>]
module ColumnReaders =
    type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
            member __.Name = column
            member __.IsNull() = getOrdinal column |> reader.IsDBNull
            override __.ToString() = __.Name

    type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

    type OptionColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> None
                | o -> Some (getter o)

    type NullableObjectColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> null
                | o -> (getter o) |> unbox

    type NullableValueColumn<'T, 'Reader when 'T : struct and 'T : (new : unit -> 'T) and 'T :> System.ValueType and 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> System.Nullable<'T>()
                | o -> System.Nullable<'T> (getter o)

[<AutoOpen>]
module private DataReaderExtensions =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) = 
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime
    
    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) = 
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan
        

module main =
    [<CLIMutable>]
    type AspNetRoleClaims =
        { Id: int64
          RoleId: string
          ClaimType: string
          ClaimValue: string }

    let AspNetRoleClaims = table<AspNetRoleClaims>

    [<CLIMutable>]
    type AspNetRoles =
        { Id: string
          Name: string
          NormalizedName: string
          ConcurrencyStamp: string }

    let AspNetRoles = table<AspNetRoles>

    [<CLIMutable>]
    type AspNetUserClaims =
        { Id: int64
          UserId: string
          ClaimType: string
          ClaimValue: string }

    let AspNetUserClaims = table<AspNetUserClaims>

    [<CLIMutable>]
    type AspNetUserLogins =
        { LoginProvider: string
          ProviderKey: string
          ProviderDisplayName: string
          UserId: string }

    let AspNetUserLogins = table<AspNetUserLogins>

    [<CLIMutable>]
    type AspNetUserRoles = { UserId: string; RoleId: string }

    let AspNetUserRoles = table<AspNetUserRoles>

    [<CLIMutable>]
    type AspNetUserTokens =
        { UserId: string
          LoginProvider: string
          Name: string
          Value: string }

    let AspNetUserTokens = table<AspNetUserTokens>

    [<CLIMutable>]
    type AspNetUsers =
        { Id: string
          UserName: string
          NormalizedUserName: string
          Email: string
          NormalizedEmail: string
          EmailConfirmed: int64
          PasswordHash: string
          SecurityStamp: string
          ConcurrencyStamp: string
          PhoneNumber: Option<string>
          PhoneNumberConfirmed: int64
          TwoFactorEnabled: int64
          LockoutEnd: Option<string>
          LockoutEnabled: int64
          AccessFailedCount: int64 }

    let AspNetUsers = table<AspNetUsers>

    [<CLIMutable>]
    type __EFMigrationsHistory =
        { MigrationId: string
          ProductVersion: string }

    let __EFMigrationsHistory = table<__EFMigrationsHistory>

    [<CLIMutable>]
    type comments =
        { Id: string
          Content: string
          Author: string
          Parent: string
          PostId: string }

    let comments = table<comments>

    [<CLIMutable>]
    type dots = { Dot: string; UsedBy: string }

    let dots = table<dots>

    [<CLIMutable>]
    type posts =
        { Id: string
          Title: string
          PublishedOn: System.DateOnly
          Author: string }

    let posts = table<posts>

    module Readers =
        type AspNetRoleClaimsReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "Id")
            member __.RoleId = RequiredColumn(reader, getOrdinal, reader.GetString, "RoleId")
            member __.ClaimType = RequiredColumn(reader, getOrdinal, reader.GetString, "ClaimType")
            member __.ClaimValue = RequiredColumn(reader, getOrdinal, reader.GetString, "ClaimValue")

            member __.Read() =
                { Id = __.Id.Read()
                  RoleId = __.RoleId.Read()
                  ClaimType = __.ClaimType.Read()
                  ClaimValue = __.ClaimValue.Read() }
                : AspNetRoleClaims

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type AspNetRolesReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetString, "Id")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.NormalizedName = RequiredColumn(reader, getOrdinal, reader.GetString, "NormalizedName")
            member __.ConcurrencyStamp = RequiredColumn(reader, getOrdinal, reader.GetString, "ConcurrencyStamp")

            member __.Read() =
                { Id = __.Id.Read()
                  Name = __.Name.Read()
                  NormalizedName = __.NormalizedName.Read()
                  ConcurrencyStamp = __.ConcurrencyStamp.Read() }
                : AspNetRoles

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type AspNetUserClaimsReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetInt64, "Id")
            member __.UserId = RequiredColumn(reader, getOrdinal, reader.GetString, "UserId")
            member __.ClaimType = RequiredColumn(reader, getOrdinal, reader.GetString, "ClaimType")
            member __.ClaimValue = RequiredColumn(reader, getOrdinal, reader.GetString, "ClaimValue")

            member __.Read() =
                { Id = __.Id.Read()
                  UserId = __.UserId.Read()
                  ClaimType = __.ClaimType.Read()
                  ClaimValue = __.ClaimValue.Read() }
                : AspNetUserClaims

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type AspNetUserLoginsReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
            member __.LoginProvider = RequiredColumn(reader, getOrdinal, reader.GetString, "LoginProvider")
            member __.ProviderKey = RequiredColumn(reader, getOrdinal, reader.GetString, "ProviderKey")
            member __.ProviderDisplayName = RequiredColumn(reader, getOrdinal, reader.GetString, "ProviderDisplayName")
            member __.UserId = RequiredColumn(reader, getOrdinal, reader.GetString, "UserId")

            member __.Read() =
                { LoginProvider = __.LoginProvider.Read()
                  ProviderKey = __.ProviderKey.Read()
                  ProviderDisplayName = __.ProviderDisplayName.Read()
                  UserId = __.UserId.Read() }
                : AspNetUserLogins

            member __.ReadIfNotNull() =
                if __.LoginProvider.IsNull() then None else Some(__.Read())

        type AspNetUserRolesReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
            member __.UserId = RequiredColumn(reader, getOrdinal, reader.GetString, "UserId")
            member __.RoleId = RequiredColumn(reader, getOrdinal, reader.GetString, "RoleId")

            member __.Read() =
                { UserId = __.UserId.Read()
                  RoleId = __.RoleId.Read() }
                : AspNetUserRoles

            member __.ReadIfNotNull() =
                if __.UserId.IsNull() then None else Some(__.Read())

        type AspNetUserTokensReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
            member __.UserId = RequiredColumn(reader, getOrdinal, reader.GetString, "UserId")
            member __.LoginProvider = RequiredColumn(reader, getOrdinal, reader.GetString, "LoginProvider")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.Value = RequiredColumn(reader, getOrdinal, reader.GetString, "Value")

            member __.Read() =
                { UserId = __.UserId.Read()
                  LoginProvider = __.LoginProvider.Read()
                  Name = __.Name.Read()
                  Value = __.Value.Read() }
                : AspNetUserTokens

            member __.ReadIfNotNull() =
                if __.UserId.IsNull() then None else Some(__.Read())

        type AspNetUsersReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetString, "Id")
            member __.UserName = RequiredColumn(reader, getOrdinal, reader.GetString, "UserName")
            member __.NormalizedUserName = RequiredColumn(reader, getOrdinal, reader.GetString, "NormalizedUserName")
            member __.Email = RequiredColumn(reader, getOrdinal, reader.GetString, "Email")
            member __.NormalizedEmail = RequiredColumn(reader, getOrdinal, reader.GetString, "NormalizedEmail")
            member __.EmailConfirmed = RequiredColumn(reader, getOrdinal, reader.GetInt64, "EmailConfirmed")
            member __.PasswordHash = RequiredColumn(reader, getOrdinal, reader.GetString, "PasswordHash")
            member __.SecurityStamp = RequiredColumn(reader, getOrdinal, reader.GetString, "SecurityStamp")
            member __.ConcurrencyStamp = RequiredColumn(reader, getOrdinal, reader.GetString, "ConcurrencyStamp")
            member __.PhoneNumber = OptionColumn(reader, getOrdinal, reader.GetString, "PhoneNumber")
            member __.PhoneNumberConfirmed = RequiredColumn(reader, getOrdinal, reader.GetInt64, "PhoneNumberConfirmed")
            member __.TwoFactorEnabled = RequiredColumn(reader, getOrdinal, reader.GetInt64, "TwoFactorEnabled")
            member __.LockoutEnd = OptionColumn(reader, getOrdinal, reader.GetString, "LockoutEnd")
            member __.LockoutEnabled = RequiredColumn(reader, getOrdinal, reader.GetInt64, "LockoutEnabled")
            member __.AccessFailedCount = RequiredColumn(reader, getOrdinal, reader.GetInt64, "AccessFailedCount")

            member __.Read() =
                { Id = __.Id.Read()
                  UserName = __.UserName.Read()
                  NormalizedUserName = __.NormalizedUserName.Read()
                  Email = __.Email.Read()
                  NormalizedEmail = __.NormalizedEmail.Read()
                  EmailConfirmed = __.EmailConfirmed.Read()
                  PasswordHash = __.PasswordHash.Read()
                  SecurityStamp = __.SecurityStamp.Read()
                  ConcurrencyStamp = __.ConcurrencyStamp.Read()
                  PhoneNumber = __.PhoneNumber.Read()
                  PhoneNumberConfirmed = __.PhoneNumberConfirmed.Read()
                  TwoFactorEnabled = __.TwoFactorEnabled.Read()
                  LockoutEnd = __.LockoutEnd.Read()
                  LockoutEnabled = __.LockoutEnabled.Read()
                  AccessFailedCount = __.AccessFailedCount.Read() }
                : AspNetUsers

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type __EFMigrationsHistoryReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
            member __.MigrationId = RequiredColumn(reader, getOrdinal, reader.GetString, "MigrationId")
            member __.ProductVersion = RequiredColumn(reader, getOrdinal, reader.GetString, "ProductVersion")

            member __.Read() =
                { MigrationId = __.MigrationId.Read()
                  ProductVersion = __.ProductVersion.Read() }
                : __EFMigrationsHistory

            member __.ReadIfNotNull() =
                if __.MigrationId.IsNull() then None else Some(__.Read())

        type commentsReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetString, "Id")
            member __.Content = RequiredColumn(reader, getOrdinal, reader.GetString, "Content")
            member __.Author = RequiredColumn(reader, getOrdinal, reader.GetString, "Author")
            member __.Parent = RequiredColumn(reader, getOrdinal, reader.GetString, "Parent")
            member __.PostId = RequiredColumn(reader, getOrdinal, reader.GetString, "PostId")

            member __.Read() =
                { Id = __.Id.Read()
                  Content = __.Content.Read()
                  Author = __.Author.Read()
                  Parent = __.Parent.Read()
                  PostId = __.PostId.Read() }
                : comments

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

        type dotsReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
            member __.Dot = RequiredColumn(reader, getOrdinal, reader.GetString, "Dot")
            member __.UsedBy = RequiredColumn(reader, getOrdinal, reader.GetString, "UsedBy")

            member __.Read() =
                { Dot = __.Dot.Read()
                  UsedBy = __.UsedBy.Read() }
                : dots

            member __.ReadIfNotNull() =
                if __.Dot.IsNull() then None else Some(__.Read())

        type postsReader(reader: System.Data.Common.DbDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetString, "Id")
            member __.Title = RequiredColumn(reader, getOrdinal, reader.GetString, "Title")
            member __.PublishedOn = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "PublishedOn")
            member __.Author = RequiredColumn(reader, getOrdinal, reader.GetString, "Author")

            member __.Read() =
                { Id = __.Id.Read()
                  Title = __.Title.Read()
                  PublishedOn = __.PublishedOn.Read()
                  Author = __.Author.Read() }
                : posts

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

type HydraReader(reader: System.Data.Common.DbDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazymainAspNetRoleClaims = lazy (main.Readers.AspNetRoleClaimsReader(reader, buildGetOrdinal 4))
    let lazymainAspNetRoles = lazy (main.Readers.AspNetRolesReader(reader, buildGetOrdinal 4))
    let lazymainAspNetUserClaims = lazy (main.Readers.AspNetUserClaimsReader(reader, buildGetOrdinal 4))
    let lazymainAspNetUserLogins = lazy (main.Readers.AspNetUserLoginsReader(reader, buildGetOrdinal 4))
    let lazymainAspNetUserRoles = lazy (main.Readers.AspNetUserRolesReader(reader, buildGetOrdinal 2))
    let lazymainAspNetUserTokens = lazy (main.Readers.AspNetUserTokensReader(reader, buildGetOrdinal 4))
    let lazymainAspNetUsers = lazy (main.Readers.AspNetUsersReader(reader, buildGetOrdinal 15))
    let lazymain__EFMigrationsHistory = lazy (main.Readers.__EFMigrationsHistoryReader(reader, buildGetOrdinal 2))
    let lazymaincomments = lazy (main.Readers.commentsReader(reader, buildGetOrdinal 5))
    let lazymaindots = lazy (main.Readers.dotsReader(reader, buildGetOrdinal 2))
    let lazymainposts = lazy (main.Readers.postsReader(reader, buildGetOrdinal 4))
    member __.``main.AspNetRoleClaims`` = lazymainAspNetRoleClaims.Value
    member __.``main.AspNetRoles`` = lazymainAspNetRoles.Value
    member __.``main.AspNetUserClaims`` = lazymainAspNetUserClaims.Value
    member __.``main.AspNetUserLogins`` = lazymainAspNetUserLogins.Value
    member __.``main.AspNetUserRoles`` = lazymainAspNetUserRoles.Value
    member __.``main.AspNetUserTokens`` = lazymainAspNetUserTokens.Value
    member __.``main.AspNetUsers`` = lazymainAspNetUsers.Value
    member __.``main.__EFMigrationsHistory`` = lazymain__EFMigrationsHistory.Value
    member __.``main.comments`` = lazymaincomments.Value
    member __.``main.dots`` = lazymaindots.Value
    member __.``main.posts`` = lazymainposts.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "main.AspNetRoleClaims", false -> __.``main.AspNetRoleClaims``.Read >> box
        | "main.AspNetRoleClaims", true -> __.``main.AspNetRoleClaims``.ReadIfNotNull >> box
        | "main.AspNetRoles", false -> __.``main.AspNetRoles``.Read >> box
        | "main.AspNetRoles", true -> __.``main.AspNetRoles``.ReadIfNotNull >> box
        | "main.AspNetUserClaims", false -> __.``main.AspNetUserClaims``.Read >> box
        | "main.AspNetUserClaims", true -> __.``main.AspNetUserClaims``.ReadIfNotNull >> box
        | "main.AspNetUserLogins", false -> __.``main.AspNetUserLogins``.Read >> box
        | "main.AspNetUserLogins", true -> __.``main.AspNetUserLogins``.ReadIfNotNull >> box
        | "main.AspNetUserRoles", false -> __.``main.AspNetUserRoles``.Read >> box
        | "main.AspNetUserRoles", true -> __.``main.AspNetUserRoles``.ReadIfNotNull >> box
        | "main.AspNetUserTokens", false -> __.``main.AspNetUserTokens``.Read >> box
        | "main.AspNetUserTokens", true -> __.``main.AspNetUserTokens``.ReadIfNotNull >> box
        | "main.AspNetUsers", false -> __.``main.AspNetUsers``.Read >> box
        | "main.AspNetUsers", true -> __.``main.AspNetUsers``.ReadIfNotNull >> box
        | "main.__EFMigrationsHistory", false -> __.``main.__EFMigrationsHistory``.Read >> box
        | "main.__EFMigrationsHistory", true -> __.``main.__EFMigrationsHistory``.ReadIfNotNull >> box
        | "main.comments", false -> __.``main.comments``.Read >> box
        | "main.comments", true -> __.``main.comments``.ReadIfNotNull >> box
        | "main.dots", false -> __.``main.dots``.Read >> box
        | "main.dots", true -> __.``main.dots``.ReadIfNotNull >> box
        | "main.posts", false -> __.``main.posts``.Read >> box
        | "main.posts", true -> __.``main.posts``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: System.Data.Common.DbDataReader, isOpt: bool, isNullable: bool) =
        let wrapValue get (ord: int) = 
            if isOpt then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            elif isNullable then (if reader.IsDBNull ord then System.Nullable() else get ord |> System.Nullable) |> box
            else get ord |> box

        let wrapRef get (ord: int) = 
            if isOpt then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box
        
        if t = typedefof<int16> then Some(wrapValue reader.GetInt16)
        elif t = typedefof<int> then Some(wrapValue reader.GetInt32)
        elif t = typedefof<double> then Some(wrapValue reader.GetDouble)
        elif t = typedefof<System.Single> then Some(wrapValue reader.GetDouble)
        elif t = typedefof<decimal> then Some(wrapValue reader.GetDecimal)
        elif t = typedefof<bool> then Some(wrapValue reader.GetBoolean)
        elif t = typedefof<byte> then Some(wrapValue reader.GetByte)
        elif t = typedefof<int64> then Some(wrapValue reader.GetInt64)
        elif t = typedefof<byte[]> then Some(wrapRef reader.GetFieldValue<byte[]>)
        elif t = typedefof<string> then Some(wrapRef reader.GetString)
        elif t = typedefof<System.DateTime> then Some(wrapValue reader.GetDateTime)
        elif t = typedefof<System.DateOnly> then Some(wrapValue reader.GetDateOnly)
        elif t = typedefof<System.TimeOnly> then Some(wrapValue reader.GetTimeOnly)
        elif t = typedefof<System.Guid> then Some(wrapValue reader.GetGuid)
        else None

    static member Read(reader: System.Data.Common.DbDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt, isNullable = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> then t.GenericTypeArguments[0], true, false
                elif t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<System.Nullable<_>> then t.GenericTypeArguments[0], false, true
                else t, false, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt, isNullable) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
