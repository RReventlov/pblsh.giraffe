// <auto-generated />
namespace pblsh.giraffe.Migrations

open System
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Storage.ValueConversion
open pblsh.giraffe

[<DbContext(typeof<Identity.ApplicationDbContext>)>]
[<Migration("20240417122917_initial")>]
type initial() =
    inherit Migration()

    override this.Up(migrationBuilder:MigrationBuilder) =
        migrationBuilder.CreateTable(
            name = "AspNetRoles"
            ,columns = (fun table -> 
            {|
                Id =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
                Name =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(256)"
                        ,maxLength = Nullable(256)
                    )
                NormalizedName =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(256)"
                        ,maxLength = Nullable(256)
                    )
                ConcurrencyStamp =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_AspNetRoles", (fun x -> (x.Id) :> obj)
                    ) |> ignore
                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "AspNetUsers"
            ,columns = (fun table -> 
            {|
                Id =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
                UserName =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(256)"
                        ,maxLength = Nullable(256)
                    )
                NormalizedUserName =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(256)"
                        ,maxLength = Nullable(256)
                    )
                Email =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(256)"
                        ,maxLength = Nullable(256)
                    )
                NormalizedEmail =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(256)"
                        ,maxLength = Nullable(256)
                    )
                EmailConfirmed =
                    table.Column<bool>(
                        nullable = false
                        ,``type`` = "bit"
                    )
                PasswordHash =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                SecurityStamp =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                ConcurrencyStamp =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                PhoneNumber =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                PhoneNumberConfirmed =
                    table.Column<bool>(
                        nullable = false
                        ,``type`` = "bit"
                    )
                TwoFactorEnabled =
                    table.Column<bool>(
                        nullable = false
                        ,``type`` = "bit"
                    )
                LockoutEnd =
                    table.Column<DateTimeOffset>(
                        nullable = true
                        ,``type`` = "datetimeoffset"
                    )
                LockoutEnabled =
                    table.Column<bool>(
                        nullable = false
                        ,``type`` = "bit"
                    )
                AccessFailedCount =
                    table.Column<int>(
                        nullable = false
                        ,``type`` = "int"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_AspNetUsers", (fun x -> (x.Id) :> obj)
                    ) |> ignore
                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "AspNetRoleClaims"
            ,columns = (fun table -> 
            {|
                Id =
                    table.Column<int>(
                        nullable = false
                        ,``type`` = "int"
                    ).Annotation("SqlServer:Identity", "1, 1")
                RoleId =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
                ClaimType =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                ClaimValue =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_AspNetRoleClaims", (fun x -> (x.Id) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_AspNetRoleClaims_AspNetRoles_RoleId"
                        ,column = (fun x -> (x.RoleId) :> obj)
                        ,principalTable = "AspNetRoles"
                        ,principalColumn = "Id"
                        ,onDelete = ReferentialAction.Cascade
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "AspNetUserClaims"
            ,columns = (fun table -> 
            {|
                Id =
                    table.Column<int>(
                        nullable = false
                        ,``type`` = "int"
                    ).Annotation("SqlServer:Identity", "1, 1")
                UserId =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
                ClaimType =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                ClaimValue =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_AspNetUserClaims", (fun x -> (x.Id) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_AspNetUserClaims_AspNetUsers_UserId"
                        ,column = (fun x -> (x.UserId) :> obj)
                        ,principalTable = "AspNetUsers"
                        ,principalColumn = "Id"
                        ,onDelete = ReferentialAction.Cascade
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "AspNetUserLogins"
            ,columns = (fun table -> 
            {|
                LoginProvider =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
                ProviderKey =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
                ProviderDisplayName =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
                UserId =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_AspNetUserLogins", (fun x -> (x.LoginProvider, x.ProviderKey) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_AspNetUserLogins_AspNetUsers_UserId"
                        ,column = (fun x -> (x.UserId) :> obj)
                        ,principalTable = "AspNetUsers"
                        ,principalColumn = "Id"
                        ,onDelete = ReferentialAction.Cascade
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "AspNetUserRoles"
            ,columns = (fun table -> 
            {|
                UserId =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
                RoleId =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_AspNetUserRoles", (fun x -> (x.UserId, x.RoleId) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_AspNetUserRoles_AspNetRoles_RoleId"
                        ,column = (fun x -> (x.RoleId) :> obj)
                        ,principalTable = "AspNetRoles"
                        ,principalColumn = "Id"
                        ,onDelete = ReferentialAction.Cascade
                        ) |> ignore

                    table.ForeignKey(
                        name = "FK_AspNetUserRoles_AspNetUsers_UserId"
                        ,column = (fun x -> (x.UserId) :> obj)
                        ,principalTable = "AspNetUsers"
                        ,principalColumn = "Id"
                        ,onDelete = ReferentialAction.Cascade
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateTable(
            name = "AspNetUserTokens"
            ,columns = (fun table -> 
            {|
                UserId =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
                LoginProvider =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
                Name =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(450)"
                    )
                Value =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "nvarchar(max)"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_AspNetUserTokens", (fun x -> (x.UserId, x.LoginProvider, x.Name) :> obj)
                    ) |> ignore
                    table.ForeignKey(
                        name = "FK_AspNetUserTokens_AspNetUsers_UserId"
                        ,column = (fun x -> (x.UserId) :> obj)
                        ,principalTable = "AspNetUsers"
                        ,principalColumn = "Id"
                        ,onDelete = ReferentialAction.Cascade
                        ) |> ignore

                )
        ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_AspNetRoleClaims_RoleId"
            ,table = "AspNetRoleClaims"
            ,column = "RoleId"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "RoleNameIndex"
            ,table = "AspNetRoles"
            ,column = "NormalizedName"
            ,unique = true
            ,filter = "[NormalizedName] IS NOT NULL"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_AspNetUserClaims_UserId"
            ,table = "AspNetUserClaims"
            ,column = "UserId"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_AspNetUserLogins_UserId"
            ,table = "AspNetUserLogins"
            ,column = "UserId"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "IX_AspNetUserRoles_RoleId"
            ,table = "AspNetUserRoles"
            ,column = "RoleId"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "EmailIndex"
            ,table = "AspNetUsers"
            ,column = "NormalizedEmail"
            ) |> ignore

        migrationBuilder.CreateIndex(
            name = "UserNameIndex"
            ,table = "AspNetUsers"
            ,column = "NormalizedUserName"
            ,unique = true
            ,filter = "[NormalizedUserName] IS NOT NULL"
            ) |> ignore


    override this.Down(migrationBuilder:MigrationBuilder) =
        migrationBuilder.DropTable(
            name = "AspNetRoleClaims"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "AspNetUserClaims"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "AspNetUserLogins"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "AspNetUserRoles"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "AspNetUserTokens"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "AspNetRoles"
            ) |> ignore

        migrationBuilder.DropTable(
            name = "AspNetUsers"
            ) |> ignore


    override this.BuildTargetModel(modelBuilder: ModelBuilder) =
        modelBuilder
            .HasAnnotation("ProductVersion", "6.0.29")
            .HasAnnotation("Relational:MaxIdentifierLength", 128) |> ignore

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", (fun b ->

            b.Property<string>("Id")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.Property<string>("ConcurrencyStamp")
                .IsConcurrencyToken()
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("Name")
                .IsRequired(true)
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)")
                |> ignore

            b.Property<string>("NormalizedName")
                .IsRequired(true)
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("NormalizedName")
                .IsUnique()
                .HasDatabaseName("RoleNameIndex")
                .HasFilter("[NormalizedName] IS NOT NULL") |> ignore

            b.ToTable("AspNetRoles") |> ignore

        )) |> ignore

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", (fun b ->

            b.Property<int>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("int")
                |> ignore

            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1) |> ignore

            b.Property<string>("ClaimType")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("ClaimValue")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("RoleId")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("RoleId")
                |> ignore

            b.ToTable("AspNetRoleClaims") |> ignore

        )) |> ignore

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", (fun b ->

            b.Property<string>("Id")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.Property<int>("AccessFailedCount")
                .IsRequired(true)
                .HasColumnType("int")
                |> ignore

            b.Property<string>("ConcurrencyStamp")
                .IsConcurrencyToken()
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("Email")
                .IsRequired(true)
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)")
                |> ignore

            b.Property<bool>("EmailConfirmed")
                .IsRequired(true)
                .HasColumnType("bit")
                |> ignore

            b.Property<bool>("LockoutEnabled")
                .IsRequired(true)
                .HasColumnType("bit")
                |> ignore

            b.Property<Nullable<DateTimeOffset>>("LockoutEnd")
                .IsRequired(false)
                .HasColumnType("datetimeoffset")
                |> ignore

            b.Property<string>("NormalizedEmail")
                .IsRequired(true)
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)")
                |> ignore

            b.Property<string>("NormalizedUserName")
                .IsRequired(true)
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)")
                |> ignore

            b.Property<string>("PasswordHash")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("PhoneNumber")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<bool>("PhoneNumberConfirmed")
                .IsRequired(true)
                .HasColumnType("bit")
                |> ignore

            b.Property<string>("SecurityStamp")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<bool>("TwoFactorEnabled")
                .IsRequired(true)
                .HasColumnType("bit")
                |> ignore

            b.Property<string>("UserName")
                .IsRequired(true)
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("NormalizedEmail")
                .HasDatabaseName("EmailIndex") |> ignore


            b.HasIndex("NormalizedUserName")
                .IsUnique()
                .HasDatabaseName("UserNameIndex")
                .HasFilter("[NormalizedUserName] IS NOT NULL") |> ignore

            b.ToTable("AspNetUsers") |> ignore

        )) |> ignore

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", (fun b ->

            b.Property<int>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("int")
                |> ignore

            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1) |> ignore

            b.Property<string>("ClaimType")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("ClaimValue")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("UserId")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("UserId")
                |> ignore

            b.ToTable("AspNetUserClaims") |> ignore

        )) |> ignore

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", (fun b ->

            b.Property<string>("LoginProvider")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.Property<string>("ProviderKey")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.Property<string>("ProviderDisplayName")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.Property<string>("UserId")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.HasKey("LoginProvider", "ProviderKey")
                |> ignore


            b.HasIndex("UserId")
                |> ignore

            b.ToTable("AspNetUserLogins") |> ignore

        )) |> ignore

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", (fun b ->

            b.Property<string>("UserId")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.Property<string>("RoleId")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.HasKey("UserId", "RoleId")
                |> ignore


            b.HasIndex("RoleId")
                |> ignore

            b.ToTable("AspNetUserRoles") |> ignore

        )) |> ignore

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", (fun b ->

            b.Property<string>("UserId")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.Property<string>("LoginProvider")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.Property<string>("Name")
                .IsRequired(true)
                .HasColumnType("nvarchar(450)")
                |> ignore

            b.Property<string>("Value")
                .IsRequired(true)
                .HasColumnType("nvarchar(max)")
                |> ignore

            b.HasKey("UserId", "LoginProvider", "Name")
                |> ignore


            b.ToTable("AspNetUserTokens") |> ignore

        )) |> ignore
        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", (fun b ->
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                .WithMany()
                .HasForeignKey("RoleId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", (fun b ->
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                .WithMany()
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", (fun b ->
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                .WithMany()
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", (fun b ->
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                .WithMany()
                .HasForeignKey("RoleId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                .WithMany()
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", (fun b ->
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                .WithMany()
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore

